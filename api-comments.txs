This was extracted from pgn-reader, and is the current exported functions, so similar to an API. As it is visible, not
all functions are used at all, those are good candidates to get rid of. Some functions have no context, or a defined one
and should be easy to use to a separate file and provide that functionality if needed.    

addMove(move: PrimitiveMove | string, moveNumber: number): number;	--> Should be part of the new API, arguments have to be checked
afterMoveWithVariation(move: PgnReaderMove): boolean;
changeNag(_nag: string, moveNumber: number, added: boolean): void;	--> Needed for the editor only, separate module
checkedGames?: PgnGame[];		==> Part of the new API, no idea what that was for
chess: any;	--> not necessary, create individually, no reference to reader
clearNags(moveNumber: number): void;
configuration: PgnReaderConfiguration;	--> Why is that needed at all in the viewer? Strange ...
constructor(configuration: PgnReaderConfiguration);	--> Not needed
currentGameIndex: number;
deleteMove(id: number): void;	--> Needed for the editor only, part of EditAPI then?
deleteMovesBefore(moveRep: number | string): string;
eachMove(movesMainLine: PgnMove[]): void;
endGame: string;
endVariation(move: PgnReaderMove): boolean;		--> Utility function, separated from API
findMove(moveRep: number | string): PgnReaderMove | undefined;	--> Check, if needed any more. Logic should be simple enough to reimplement it.
gameState: GameState;
games: ParseTree[];
getEndGame(): string;	--> Should be part of the static structure, not needed in the API
getFirstMove(): PgnReaderMove | null;	--> Unclear why needed, candidate to get rid of
getGame(index: number): PgnGame;
getGameComment(): GameComment;		--> Should be part of the static structure
getGames(): ParseTree[];		--> Only needed in the context of multiple games, should be refactored. Eliminate from reader then.
getMove(id: number): PgnReaderMove | undefined;	--> Should be part of the new API, part of the static structure
getMoves(): PgnReaderMove[];	--> Should not be necessary any more, part of the static structure
getOrderedMoves(current: PgnReaderMove, returnedMoves: PgnReaderMove[]): PgnReaderMove[];	--> Strange case, only once needed in the viewer, how to get rid of it?
getPosition(index: number | null): FEN;
getTags(): Tags;		--> Part of the static structure in the future
isDeleted(id: number): boolean;		--> Seems to be needed for cleanup, strange. Should be not necessary
isMove(id: number): boolean;
loadGame(game: PgnGame): void;#
loadMany(): void;
loadOne(game: ParseTree | number): void;	--> Old API, eliminate
loadPgn(): PgnReader;		--> Old API, see what is the replacement for it. Should be the central place (== read??)
makeMove(move?: PgnReaderMove | SAN): boolean;
moves: PgnReaderMove[]; --> Move to new API
possibleMoves(move: number | string): Map<Field, Field[]>; --> not needed in the context of the reader, only argument should be a FEN all the time
promoteMove(id: number): void;		--> Part of the edit API then.
readMoves(moves: PgnMove[]): void;
san(move: PgnReaderMove): string;		--> Should be a utility function without any dependency
sanWithNags(move: PgnReaderMove): string;	--> Should be a utility function without any dependency
setPosition(position: FEN): boolean;
setShapes(move: PgnReaderMove, shapes: Shape[]): void;	--> Needed for editor, near Chessground
setToStart(): string;		--> Check carefully, only needed by the editor at the moment (why??)
startMainLine(move: PgnReaderMove): boolean;	--> Utility function, separated from API
startVariation(move: PgnReaderMove): boolean;	--> Utility function, separated from API
updateVariationLevel(move: PgnReaderMove, varLevel: number): void;
writePgn(configuration?: {}): string;		--> Is that needed by the reader at all, or only in the viewer. Check implementation!
